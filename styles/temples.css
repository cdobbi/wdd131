/* temples.css */
* {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}

body {
    font-family: "Poppins", sans-serif;
    font-style: normal;
}

nav a {
    display: block;
    color: black;
    text-align: center;
    margin: 0.5rem;
    padding: 0.5rem;
    text-decoration: none;
    /* Remove underline from links */
}

nav a:hover {
    background: rgb(253, 143, 7);
    color: yellow;
}

div.menu {
    text-align: right;
    padding: 0.5rem;
    cursor: pointer;
    display: none; /* Hide hamburger menu by default */
}

.menu::before {
    content: "☰"; /* Hamburger icon */
    font-size: large;
    cursor: pointer;
    color: black;
}

.menu.open::before {
    content: "✖"; /* Close icon */
    font-size: large;
}

.nav-menu {
    display: none; /* Hide navigation menu by default */
}

.nav-menu.show {
    display: flex;
    flex-direction: column;
}

/* Add media query for mobile view */
@media (max-width: 937px) {
    .menu {
        display: block; /* Show hamburger menu in mobile view */
    }
    .nav-menu {
        display: none; /* Hide nav menu by default */
    }
    .nav-menu.show {
        display: flex;
        flex-direction: column;
    }
}

/* 

this file should be used to style mobile devices.
Most of your CSS should be located in the temples.css file in mobile first design

Use CSS Flex on the navigation nav.

Here is the general syntax is setting up a CSS media query:

Header Contained CSS Flex Example - CodePen Source Code
The navigation must employ a hover affect. See the CodePen above for an example.
The main element has a limited width and is centered on the screen horizontally.
Layout the main column figure elements using CSS Grid. In the mobile view, there should only be one (1) column.
The application of CSS Grid to support a responsive view is up to you. Some of the options could be:
• use grid-template-column specific fr changes in the media query, or
• use grid-template-column property with a repeat function and auto-fit and minmax function.

@media not|only mediatype and (expressions) {
  /* CSS rules go here inside the @media query's opening and closing curly brackets {}
}
*/